{
  "pipelineSpec": {
    "components": {
      "comp-condition-check-if-endpoint-set-2": {
        "dag": {
          "tasks": {
            "model-deployment-op": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-model-deployment-op"
              },
              "inputs": {
                "parameters": {
                  "endpoint_name": {
                    "componentInputParameter": "pipelineparam--endpoint"
                  },
                  "location": {
                    "componentInputParameter": "pipelineparam--location"
                  },
                  "model_name": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "taxi-tips"
                      }
                    }
                  },
                  "project_id": {
                    "componentInputParameter": "pipelineparam--project_id"
                  }
                }
              },
              "taskInfo": {
                "name": "deploy-model"
              }
            }
          }
        },
        "inputDefinitions": {
          "parameters": {
            "pipelineparam--endpoint": {
              "type": "STRING"
            },
            "pipelineparam--location": {
              "type": "STRING"
            },
            "pipelineparam--model-validation-op-Output": {
              "type": "STRING"
            },
            "pipelineparam--project_id": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-condition-check-performance-1": {
        "dag": {
          "tasks": {
            "condition-check-if-endpoint-set-2": {
              "componentRef": {
                "name": "comp-condition-check-if-endpoint-set-2"
              },
              "dependentTasks": [
                "model-evaluation-upload-op"
              ],
              "inputs": {
                "parameters": {
                  "pipelineparam--endpoint": {
                    "componentInputParameter": "pipelineparam--endpoint"
                  },
                  "pipelineparam--location": {
                    "componentInputParameter": "pipelineparam--location"
                  },
                  "pipelineparam--model-validation-op-Output": {
                    "componentInputParameter": "pipelineparam--model-validation-op-Output"
                  },
                  "pipelineparam--project_id": {
                    "componentInputParameter": "pipelineparam--project_id"
                  }
                }
              },
              "taskInfo": {
                "name": "condition-check-if-endpoint-set-2"
              },
              "triggerPolicy": {
                "condition": "inputs.parameters['pipelineparam--endpoint'].string_value != '[none]'"
              }
            },
            "model-evaluation-upload-op": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-model-evaluation-upload-op"
              },
              "dependentTasks": [
                "model-upload-op"
              ],
              "inputs": {
                "artifacts": {
                  "metrics": {
                    "componentInputArtifact": "pipelineparam--model-evaluation-op-metrics"
                  }
                },
                "parameters": {
                  "location": {
                    "componentInputParameter": "pipelineparam--location"
                  },
                  "model_resource_name": {
                    "taskOutputParameter": {
                      "outputParameterKey": "Output",
                      "producerTask": "model-upload-op"
                    }
                  },
                  "project_id": {
                    "componentInputParameter": "pipelineparam--project_id"
                  }
                }
              },
              "taskInfo": {
                "name": "register-model-evaluation"
              }
            },
            "model-upload-op": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-model-upload-op"
              },
              "inputs": {
                "artifacts": {
                  "model": {
                    "componentInputArtifact": "pipelineparam--model-training-op-model"
                  }
                },
                "parameters": {
                  "location": {
                    "componentInputParameter": "pipelineparam--location"
                  },
                  "model_name": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "taxi-tips"
                      }
                    }
                  },
                  "project_id": {
                    "componentInputParameter": "pipelineparam--project_id"
                  },
                  "serving_container_image_uri": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "europe-docker.pkg.dev/vertex-ai/prediction/sklearn-cpu.0-23:latest"
                      }
                    }
                  }
                }
              },
              "taskInfo": {
                "name": "register-model"
              }
            }
          }
        },
        "inputDefinitions": {
          "artifacts": {
            "pipelineparam--model-evaluation-op-metrics": {
              "artifactType": {
                "schemaTitle": "system.ClassificationMetrics",
                "schemaVersion": "0.0.1"
              }
            },
            "pipelineparam--model-training-op-model": {
              "artifactType": {
                "schemaTitle": "system.Model",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "pipelineparam--endpoint": {
              "type": "STRING"
            },
            "pipelineparam--location": {
              "type": "STRING"
            },
            "pipelineparam--model-validation-op-Output": {
              "type": "STRING"
            },
            "pipelineparam--project_id": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-data-extract-op": {
        "executorLabel": "exec-data-extract-op",
        "inputDefinitions": {
          "parameters": {
            "location": {
              "type": "STRING"
            },
            "project_id": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "dataset": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-data-preparation-op": {
        "executorLabel": "exec-data-preparation-op"
      },
      "comp-data-validation-op": {
        "executorLabel": "exec-data-validation-op",
        "inputDefinitions": {
          "artifacts": {
            "dataset": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "Output": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-model-deployment-op": {
        "executorLabel": "exec-model-deployment-op",
        "inputDefinitions": {
          "parameters": {
            "endpoint_name": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "model_name": {
              "type": "STRING"
            },
            "project_id": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-model-evaluation-op": {
        "executorLabel": "exec-model-evaluation-op",
        "inputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "system.Model",
                "schemaVersion": "0.0.1"
              }
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "metrics": {
              "artifactType": {
                "schemaTitle": "system.ClassificationMetrics",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-model-evaluation-upload-op": {
        "executorLabel": "exec-model-evaluation-upload-op",
        "inputDefinitions": {
          "artifacts": {
            "metrics": {
              "artifactType": {
                "schemaTitle": "system.ClassificationMetrics",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "location": {
              "type": "STRING"
            },
            "model_resource_name": {
              "type": "STRING"
            },
            "project_id": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-model-training-op": {
        "executorLabel": "exec-model-training-op",
        "inputDefinitions": {
          "artifacts": {
            "dataset": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "location": {
              "type": "STRING"
            },
            "project_id": {
              "type": "STRING"
            },
            "python_pkg": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "system.Model",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-model-upload-op": {
        "executorLabel": "exec-model-upload-op",
        "inputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "system.Model",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "location": {
              "type": "STRING"
            },
            "model_name": {
              "type": "STRING"
            },
            "project_id": {
              "type": "STRING"
            },
            "serving_container_image_uri": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "Output": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-model-validation-op": {
        "executorLabel": "exec-model-validation-op",
        "inputDefinitions": {
          "artifacts": {
            "metrics": {
              "artifactType": {
                "schemaTitle": "system.ClassificationMetrics",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "location": {
              "type": "STRING"
            },
            "model_name": {
              "type": "STRING"
            },
            "project_id": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "Output": {
              "type": "STRING"
            }
          }
        }
      }
    },
    "deploymentSpec": {
      "executors": {
        "exec-data-extract-op": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "data_extract_op"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-bigquery' 'kfp==1.8.14' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef data_extract_op(project_id: str, location: str, dataset: dsl.Output[dsl.Dataset]):\n    import os\n\n    from google.cloud import bigquery\n\n    client = bigquery.Client()\n    query = \"\"\"\n    EXPORT DATA OPTIONS(\n        uri='{path}/*.csv',\n        format='CSV',\n        overwrite=true,\n        header=true,\n        field_delimiter=',') AS\n    SELECT\n        EXTRACT(MONTH from pickup_datetime) as trip_month,\n        EXTRACT(DAY from pickup_datetime) as trip_day,\n        EXTRACT(DAYOFWEEK from pickup_datetime) as trip_day_of_week,\n        EXTRACT(HOUR from pickup_datetime) as trip_hour,\n        TIMESTAMP_DIFF(dropoff_datetime, pickup_datetime, SECOND) as trip_duration,\n        trip_distance,\n        payment_type,\n        pickup_location_id as pickup_zone,\n        pickup_location_id as dropoff_zone,\n        IF((SAFE_DIVIDE(tip_amount, fare_amount) >= 0.2), 1, 0) AS tip_bin\n    FROM\n        `bigquery-public-data.new_york_taxi_trips.tlc_yellow_trips_{year}` TABLESAMPLE SYSTEM (1 PERCENT)\n    WHERE\n        TIMESTAMP_DIFF(dropoff_datetime, pickup_datetime, SECOND) BETWEEN 300 AND 10800\n    LIMIT {limit}\n    \"\"\"\n    datasets = [\n        (f\"{dataset.path}/train\", 2020, 10000),\n        (f\"{dataset.path}/val\", 2020, 5000),\n        (f\"{dataset.path}/test\", 2020, 1000)\n    ]\n    for ds in datasets:\n        path = ds[0].replace(\"/gcs/\", \"gs://\", 1)\n        os.makedirs(path, exist_ok=True)\n        # ignoring the provided location as this dataset is in US\n        job = client.query(query.format(path=path, year=ds[1], limit=ds[2]), project=project_id, location=\"us\")\n        job.result()\n\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-data-preparation-op": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "data_preparation_op"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.14' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef data_preparation_op():\n    pass\n\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-data-validation-op": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "data_validation_op"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.14' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef data_validation_op(dataset: dsl.Input[dsl.Dataset]) -> str:\n    return \"valid\"\n\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-model-deployment-op": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "model_deployment_op"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-aiplatform' 'kfp==1.8.14' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef model_deployment_op(model_name: str, endpoint_name: str, project_id: str, location: str):\n    from google.cloud import aiplatform\n\n    aiplatform.init(project=project_id, location=location)\n    endpoints = aiplatform.Endpoint.list(filter=f\"display_name={endpoint_name}\")\n    if endpoints:\n        endpoint = endpoints[0]\n    else:\n        endpoint = aiplatform.Endpoint.create(display_name=endpoint_name, project=project_id, location=location)\n\n    models = aiplatform.Model.list(filter=f\"display_name={model_name}\")\n    if models:\n        models[0].deploy(\n            endpoint=endpoint,\n            traffic_percentage=100,\n            machine_type=\"n1-standard-2\",\n            min_replica_count=1,\n            max_replica_count=4)\n\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-model-evaluation-op": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "model_evaluation_op"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.14' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef model_evaluation_op(model: dsl.Input[dsl.Model], metrics: dsl.Output[dsl.ClassificationMetrics]):\n    import json\n\n    with open(f\"{model.path}/metrics.json\", \"r\") as f:\n        model_metrics = json.load(f)\n\n    conf_matrix = model_metrics[\"confusion_matrix\"]\n    metrics.log_confusion_matrix(categories=conf_matrix[\"categories\"], matrix=conf_matrix[\"matrix\"])\n\n    curve = model_metrics[\"roc_curve\"]\n    metrics.log_roc_curve(fpr=curve[\"fpr\"], tpr=curve[\"tpr\"], threshold=curve[\"thresholds\"])\n\n    metrics.metadata[\"auc\"] = model_metrics[\"auc\"]\n\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-model-evaluation-upload-op": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "model_evaluation_upload_op"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-aiplatform' 'kfp==1.8.14' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef model_evaluation_upload_op(\n        metrics: dsl.Input[dsl.ClassificationMetrics],\n        model_resource_name: str,\n        project_id: str,\n        location: str):\n    from google.api_core import gapic_v1\n    from google.cloud import aiplatform\n    from google.protobuf.struct_pb2 import Struct\n    from google.protobuf.struct_pb2 import Value\n\n    model_evaluation = {\n        \"display_name\": \"pipeline-eval\",\n        \"metrics\": Value(struct_value=Struct(fields={\"auRoc\": Value(number_value=metrics.metadata[\"auc\"])})),\n        \"metrics_schema_uri\": \"gs://google-cloud-aiplatform/schema/modelevaluation/classification_metrics_1.0.0.yaml\"\n    }\n\n    aiplatform.init(project=project_id, location=location)\n    api_endpoint = location + '-aiplatform.googleapis.com'\n    client = aiplatform.gapic.ModelServiceClient(client_info=gapic_v1.client_info.ClientInfo(\n          user_agent=\"google-cloud-pipeline-components\"),\n      client_options={\n          \"api_endpoint\": api_endpoint,\n      })\n    client.import_model_evaluation(parent=model_resource_name, model_evaluation=model_evaluation)\n\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-model-training-op": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "model_training_op"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-aiplatform' 'kfp==1.8.14' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef model_training_op(\n        dataset: dsl.Input[dsl.Dataset],\n        python_pkg: str,\n        project_id: str,\n        location: str,\n        model: dsl.Output[dsl.Model]):\n    from google.cloud import aiplatform\n\n    aiplatform.init(project=project_id, location=location, staging_bucket=f\"gs://{project_id}/staging\")\n\n    pkg_with_uri = python_pkg if python_pkg.startswith(\"gs://\") else f\"gs://{project_id}/code/{python_pkg}\"\n    job = aiplatform.CustomPythonPackageTrainingJob(\n        display_name=\"taxi-tips-custom-job\",\n        python_package_gcs_uri=pkg_with_uri if pkg_with_uri.endswith(\".tar.gz\") else f\"{pkg_with_uri}.tar.gz\",\n        python_module_name=\"trainer.task\",\n        container_uri=\"europe-docker.pkg.dev/vertex-ai/training/scikit-learn-cpu.0-23:latest\")\n\n    job.run(\n        replica_count=1,\n        machine_type=\"n1-standard-4\",\n        args=[\n            \"--training-data-dir\", f\"{dataset.path}/train\",\n            \"--validation-data-dir\", f\"{dataset.path}/val\",\n            \"--output-dir\", f\"{model.path}\"\n        ]\n        # accelerator_type=aiplatform.AcceleratorType.NVIDIA_TESLA_K80,\n        # accelerator_count=4\n    )\n\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-model-upload-op": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "model_upload_op"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-aiplatform' 'kfp==1.8.14' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef model_upload_op(\n        model: dsl.Input[dsl.Model],\n        serving_container_image_uri: str,\n        project_id: str,\n        location: str,\n        model_name: str) -> str:\n    from google.cloud import aiplatform\n\n    aiplatform.init(project=project_id, location=location)\n    matches = aiplatform.Model.list(filter=f\"display_name={model_name}\")\n    parent_model = matches[0].resource_name if matches else None\n\n    registered_model = aiplatform.Model.upload(\n        display_name=model_name,\n        parent_model=parent_model,\n        artifact_uri=model.uri,\n        serving_container_image_uri=serving_container_image_uri\n    )\n\n    return registered_model.versioned_resource_name\n\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-model-validation-op": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "model_validation_op"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-aiplatform' 'kfp==1.8.14' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef model_validation_op(\n        model_name: str,\n        metrics: dsl.Input[dsl.ClassificationMetrics],\n        project_id: str,\n        location: str) -> str:\n    from google.cloud import aiplatform\n\n    aiplatform.init(project=project_id, location=location)\n    matches = aiplatform.Model.list(filter=f\"display_name={model_name}\")\n    if not matches:\n        return \"valid\"\n    else:\n        latest_model_evaluation = matches[0].get_model_evaluation()\n        return \"valid\" if metrics.metadata[\"auc\"] > latest_model_evaluation.metrics[\"auRoc\"] else \"invalid\"\n\n"
            ],
            "image": "python:3.7"
          }
        }
      }
    },
    "pipelineInfo": {
      "name": "taxi-tips-training"
    },
    "root": {
      "dag": {
        "outputs": {
          "artifacts": {
            "model-evaluation-op-metrics": {
              "artifactSelectors": [
                {
                  "outputArtifactKey": "metrics",
                  "producerSubtask": "model-evaluation-op"
                }
              ]
            }
          }
        },
        "tasks": {
          "condition-check-performance-1": {
            "componentRef": {
              "name": "comp-condition-check-performance-1"
            },
            "dependentTasks": [
              "model-evaluation-op",
              "model-training-op",
              "model-validation-op"
            ],
            "inputs": {
              "artifacts": {
                "pipelineparam--model-evaluation-op-metrics": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "metrics",
                    "producerTask": "model-evaluation-op"
                  }
                },
                "pipelineparam--model-training-op-model": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "model",
                    "producerTask": "model-training-op"
                  }
                }
              },
              "parameters": {
                "pipelineparam--endpoint": {
                  "componentInputParameter": "endpoint"
                },
                "pipelineparam--location": {
                  "componentInputParameter": "location"
                },
                "pipelineparam--model-validation-op-Output": {
                  "taskOutputParameter": {
                    "outputParameterKey": "Output",
                    "producerTask": "model-validation-op"
                  }
                },
                "pipelineparam--project_id": {
                  "componentInputParameter": "project_id"
                }
              }
            },
            "taskInfo": {
              "name": "condition-check-performance-1"
            },
            "triggerPolicy": {
              "condition": "inputs.parameters['pipelineparam--model-validation-op-Output'].string_value == 'valid'"
            }
          },
          "data-extract-op": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-data-extract-op"
            },
            "inputs": {
              "parameters": {
                "location": {
                  "componentInputParameter": "location"
                },
                "project_id": {
                  "componentInputParameter": "project_id"
                }
              }
            },
            "taskInfo": {
              "name": "extract-data"
            }
          },
          "data-preparation-op": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-data-preparation-op"
            },
            "dependentTasks": [
              "data-validation-op"
            ],
            "taskInfo": {
              "name": "prepare-data"
            }
          },
          "data-validation-op": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-data-validation-op"
            },
            "dependentTasks": [
              "data-extract-op"
            ],
            "inputs": {
              "artifacts": {
                "dataset": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "dataset",
                    "producerTask": "data-extract-op"
                  }
                }
              }
            },
            "taskInfo": {
              "name": "validate-data"
            }
          },
          "model-evaluation-op": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-model-evaluation-op"
            },
            "dependentTasks": [
              "model-training-op"
            ],
            "inputs": {
              "artifacts": {
                "model": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "model",
                    "producerTask": "model-training-op"
                  }
                }
              }
            },
            "taskInfo": {
              "name": "evaluate-model"
            }
          },
          "model-training-op": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-model-training-op"
            },
            "dependentTasks": [
              "data-extract-op",
              "data-preparation-op"
            ],
            "inputs": {
              "artifacts": {
                "dataset": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "dataset",
                    "producerTask": "data-extract-op"
                  }
                }
              },
              "parameters": {
                "location": {
                  "componentInputParameter": "location"
                },
                "project_id": {
                  "componentInputParameter": "project_id"
                },
                "python_pkg": {
                  "componentInputParameter": "python_pkg"
                }
              }
            },
            "taskInfo": {
              "name": "train-model"
            }
          },
          "model-validation-op": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-model-validation-op"
            },
            "dependentTasks": [
              "model-evaluation-op"
            ],
            "inputs": {
              "artifacts": {
                "metrics": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "metrics",
                    "producerTask": "model-evaluation-op"
                  }
                }
              },
              "parameters": {
                "location": {
                  "componentInputParameter": "location"
                },
                "model_name": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "taxi-tips"
                    }
                  }
                },
                "project_id": {
                  "componentInputParameter": "project_id"
                }
              }
            },
            "taskInfo": {
              "name": "validate-model"
            }
          }
        }
      },
      "inputDefinitions": {
        "parameters": {
          "endpoint": {
            "type": "STRING"
          },
          "location": {
            "type": "STRING"
          },
          "project_id": {
            "type": "STRING"
          },
          "python_pkg": {
            "type": "STRING"
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "model-evaluation-op-metrics": {
            "artifactType": {
              "schemaTitle": "system.ClassificationMetrics",
              "schemaVersion": "0.0.1"
            }
          }
        }
      }
    },
    "schemaVersion": "2.0.0",
    "sdkVersion": "kfp-1.8.14"
  },
  "runtimeConfig": {
    "parameters": {
      "endpoint": {
        "stringValue": "[none]"
      }
    }
  }
}